{"ast":null,"code":"const className = \"tetromino\";\nexport const TETROMINOES = {\n  I: {\n    shape: [[0, 1, 0, 0], [0, 1, 0, 0], [0, 1, 0, 0], [0, 1, 0, 0]],\n    className: `${className} ${className}__i`\n  },\n  J: {\n    shape: [[0, 1, 0], [0, 1, 0], [1, 1, 0]],\n    className: `${className} ${className}__j`\n  },\n  L: {\n    shape: [[0, 1, 0], [0, 1, 0], [0, 1, 1]],\n    className: `${className} ${className}__l`\n  },\n  O: {\n    shape: [[1, 1], [1, 1]],\n    className: `${className} ${className}__o`\n  },\n  S: {\n    shape: [[0, 1, 1], [1, 1, 0], [0, 0, 0]],\n    className: `${className} ${className}__s`\n  },\n  T: {\n    shape: [[1, 1, 1], [0, 1, 0], [0, 0, 0]],\n    className: `${className} ${className}__t`\n  },\n  Z: {\n    shape: [[1, 1, 0], [0, 1, 1], [0, 0, 0]],\n    className: `${className} ${className}__z`\n  }\n};\nexport const randomTetromino = () => {\n  const keys = Object.keys(TETROMINOES);\n  const index = Math.floor(Math.random() * keys.length);\n  const key = keys[index];\n  return TETROMINOES[key];\n};\nexport const rotate = _ref => {\n  let {\n    piece,\n    direction\n  } = _ref;\n  // Transpose rows and columns\n  const newPiece = piece.map((_, index) => piece.map(column => column[index]));\n\n  // Reverse rows to get a rotated matrix\n  if (direction > 0) return newPiece.map(row => row.reverse());\n  return newPiece.reverse();\n};\nexport const transferToBoard = _ref2 => {\n  let {\n    className,\n    isOccupied,\n    position,\n    rows,\n    shape\n  } = _ref2;\n  shape.forEach((row, y) => {\n    row.forEach((cell, x) => {\n      if (cell) {\n        const occupied = isOccupied;\n        const _y = y + position.row;\n        const _x = x + position.column;\n        rows[_y][_x] = {\n          occupied,\n          className\n        };\n      }\n    });\n  });\n  return rows;\n};","map":{"version":3,"names":["className","TETROMINOES","I","shape","J","L","O","S","T","Z","randomTetromino","keys","Object","index","Math","floor","random","length","key","rotate","piece","direction","newPiece","map","_","column","row","reverse","transferToBoard","isOccupied","position","rows","forEach","y","cell","x","occupied","_y","_x"],"sources":["/Users/praneetha18/Downloads/games-app-main/src/components/Tetris/business/Tetrominoes.js"],"sourcesContent":["const className = \"tetromino\";\n\nexport const TETROMINOES = {\n    I: {\n        shape: [\n            [0, 1, 0, 0],\n            [0, 1, 0, 0],\n            [0, 1, 0, 0],\n            [0, 1, 0, 0]\n        ],\n        className: `${className} ${className}__i`\n    },\n    J: {\n        shape: [\n            [0, 1, 0],\n            [0, 1, 0],\n            [1, 1, 0]\n        ],\n        className: `${className} ${className}__j`\n    },\n    L: {\n        shape: [\n            [0, 1, 0],\n            [0, 1, 0],\n            [0, 1, 1]\n        ],\n        className: `${className} ${className}__l`\n    },\n    O: {\n        shape: [\n            [1, 1],\n            [1, 1]\n        ],\n        className: `${className} ${className}__o`\n    },\n    S: {\n        shape: [\n            [0, 1, 1],\n            [1, 1, 0],\n            [0, 0, 0]\n        ],\n        className: `${className} ${className}__s`\n    },\n    T: {\n        shape: [\n            [1, 1, 1],\n            [0, 1, 0],\n            [0, 0, 0]\n        ],\n        className: `${className} ${className}__t`\n    },\n    Z: {\n        shape: [\n            [1, 1, 0],\n            [0, 1, 1],\n            [0, 0, 0]\n        ],\n        className: `${className} ${className}__z`\n    }\n};\n\nexport const randomTetromino = () => {\n    const keys = Object.keys(TETROMINOES);\n    const index = Math.floor(Math.random() * keys.length);\n    const key = keys[index];\n    return TETROMINOES[key];\n};\n\nexport const rotate = ({ piece, direction }) => {\n    // Transpose rows and columns\n    const newPiece = piece.map((_, index) =>\n        piece.map((column) => column[index])\n    );\n\n    // Reverse rows to get a rotated matrix\n    if (direction > 0) return newPiece.map((row) => row.reverse());\n\n    return newPiece.reverse();\n};\n\nexport const transferToBoard = ({\n    className,\n    isOccupied,\n    position,\n    rows,\n    shape\n}) => {\n    shape.forEach((row, y) => {\n        row.forEach((cell, x) => {\n            if (cell) {\n                const occupied = isOccupied;\n                const _y = y + position.row;\n                const _x = x + position.column;\n                rows[_y][_x] = { occupied, className };\n            }\n        });\n    });\n\n    return rows;\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}