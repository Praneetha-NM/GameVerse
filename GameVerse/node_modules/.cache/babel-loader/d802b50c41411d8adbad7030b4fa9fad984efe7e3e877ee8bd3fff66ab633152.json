{"ast":null,"code":"var _jsxFileName = \"/Users/praneetha18/Downloads/games-app-main/src/components/Wordle/Letter.js\",\n  _s = $RefreshSig$();\nimport React, { useContext, useEffect } from 'react';\nimport { BoardContext } from './Wordle';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Letter = _ref => {\n  _s();\n  let {\n    letterPos,\n    attemptVal\n  } = _ref;\n  const {\n    board,\n    correctWord,\n    currentAttempt,\n    setDisabledLetters\n  } = useContext(BoardContext);\n  const letter = board[attemptVal][letterPos];\n  const correctWordArr = correctWord.toUpperCase().split('');\n\n  // Count occurrences of each letter in the correct word\n  const correctLetterCounts = {};\n  correctWordArr.forEach(letter => {\n    correctLetterCounts[letter] = (correctLetterCounts[letter] || 0) + 1;\n  });\n\n  // Track how many times this letter appears in the guess\n  let guessedLetterCounts = {};\n  for (let i = 0; i <= letterPos; i++) {\n    let guessedLetter = board[attemptVal][i];\n    if (guessedLetter) {\n      guessedLetterCounts[guessedLetter] = (guessedLetterCounts[guessedLetter] || 0) + 1;\n    }\n  }\n  const correct = correctWordArr[letterPos] === letter;\n  const almost = !correct && letter !== \"\" && correctWordArr.includes(letter);\n\n  // Adjust yellow (almost) logic: Only turn yellow if the letter is not overused\n  const letterState = currentAttempt.attempt > attemptVal && (correct ? \"correct\" : almost && guessedLetterCounts[letter] <= correctLetterCounts[letter] ? \"almost\" : \"error\");\n  useEffect(() => {\n    if (letter !== \"\" && !correct && !almost) {\n      setDisabledLetters(prev => [...prev, letter]);\n    }\n  }, [currentAttempt.attempt]); // eslint-disable-line\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"wordle-letter\",\n    id: letterState,\n    children: letter\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 9\n  }, this);\n};\n_s(Letter, \"o/2NB51YLa4VZXDl8nTQULBUbCk=\");\n_c = Letter;\nexport default Letter;\nvar _c;\n$RefreshReg$(_c, \"Letter\");","map":{"version":3,"names":["React","useContext","useEffect","BoardContext","Letter","letterPos","attemptVal","board","correctWord","currentAttempt","setDisabledLetters","letter","correctWordArr","toUpperCase","split","correctLetterCounts","forEach","guessedLetterCounts","i","guessedLetter","correct","almost","includes","letterState","attempt","prev"],"sources":["/Users/praneetha18/Downloads/games-app-main/src/components/Wordle/Letter.js"],"sourcesContent":["import React, { useContext, useEffect } from 'react';\nimport { BoardContext } from './Wordle';\n\nconst Letter = ({ letterPos, attemptVal }) => {\n    const { board, correctWord, currentAttempt, setDisabledLetters } = useContext(BoardContext);\n    const letter = board[attemptVal][letterPos];\n    const correctWordArr = correctWord.toUpperCase().split('');\n    \n    // Count occurrences of each letter in the correct word\n    const correctLetterCounts = {};\n    correctWordArr.forEach(letter => {\n        correctLetterCounts[letter] = (correctLetterCounts[letter] || 0) + 1;\n    });\n\n    // Track how many times this letter appears in the guess\n    let guessedLetterCounts = {};\n    for (let i = 0; i <= letterPos; i++) {\n        let guessedLetter = board[attemptVal][i];\n        if (guessedLetter) {\n            guessedLetterCounts[guessedLetter] = (guessedLetterCounts[guessedLetter] || 0) + 1;\n        }\n    }\n\n    const correct = correctWordArr[letterPos] === letter;\n    const almost = !correct && letter !== \"\" && correctWordArr.includes(letter);\n\n    // Adjust yellow (almost) logic: Only turn yellow if the letter is not overused\n    const letterState = (currentAttempt.attempt > attemptVal) &&\n        (correct ? \"correct\" : (almost && guessedLetterCounts[letter] <= correctLetterCounts[letter]) ? \"almost\" : \"error\");\n\n    useEffect(() => {\n        if (letter !== \"\" && !correct && !almost) {\n            setDisabledLetters((prev) => [...prev, letter]);\n        }\n    }, [currentAttempt.attempt]); // eslint-disable-line\n\n    return (\n        <div className='wordle-letter' id={letterState}>{letter}</div>\n    );\n}\n\nexport default Letter;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,UAAU,EAAEC,SAAS,QAAQ,OAAO;AACpD,SAASC,YAAY,QAAQ,UAAU;AAAC;AAExC,MAAMC,MAAM,GAAG,QAA+B;EAAA;EAAA,IAA9B;IAAEC,SAAS;IAAEC;EAAW,CAAC;EACrC,MAAM;IAAEC,KAAK;IAAEC,WAAW;IAAEC,cAAc;IAAEC;EAAmB,CAAC,GAAGT,UAAU,CAACE,YAAY,CAAC;EAC3F,MAAMQ,MAAM,GAAGJ,KAAK,CAACD,UAAU,CAAC,CAACD,SAAS,CAAC;EAC3C,MAAMO,cAAc,GAAGJ,WAAW,CAACK,WAAW,EAAE,CAACC,KAAK,CAAC,EAAE,CAAC;;EAE1D;EACA,MAAMC,mBAAmB,GAAG,CAAC,CAAC;EAC9BH,cAAc,CAACI,OAAO,CAACL,MAAM,IAAI;IAC7BI,mBAAmB,CAACJ,MAAM,CAAC,GAAG,CAACI,mBAAmB,CAACJ,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC;EACxE,CAAC,CAAC;;EAEF;EACA,IAAIM,mBAAmB,GAAG,CAAC,CAAC;EAC5B,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,IAAIb,SAAS,EAAEa,CAAC,EAAE,EAAE;IACjC,IAAIC,aAAa,GAAGZ,KAAK,CAACD,UAAU,CAAC,CAACY,CAAC,CAAC;IACxC,IAAIC,aAAa,EAAE;MACfF,mBAAmB,CAACE,aAAa,CAAC,GAAG,CAACF,mBAAmB,CAACE,aAAa,CAAC,IAAI,CAAC,IAAI,CAAC;IACtF;EACJ;EAEA,MAAMC,OAAO,GAAGR,cAAc,CAACP,SAAS,CAAC,KAAKM,MAAM;EACpD,MAAMU,MAAM,GAAG,CAACD,OAAO,IAAIT,MAAM,KAAK,EAAE,IAAIC,cAAc,CAACU,QAAQ,CAACX,MAAM,CAAC;;EAE3E;EACA,MAAMY,WAAW,GAAId,cAAc,CAACe,OAAO,GAAGlB,UAAU,KACnDc,OAAO,GAAG,SAAS,GAAIC,MAAM,IAAIJ,mBAAmB,CAACN,MAAM,CAAC,IAAII,mBAAmB,CAACJ,MAAM,CAAC,GAAI,QAAQ,GAAG,OAAO,CAAC;EAEvHT,SAAS,CAAC,MAAM;IACZ,IAAIS,MAAM,KAAK,EAAE,IAAI,CAACS,OAAO,IAAI,CAACC,MAAM,EAAE;MACtCX,kBAAkB,CAAEe,IAAI,IAAK,CAAC,GAAGA,IAAI,EAAEd,MAAM,CAAC,CAAC;IACnD;EACJ,CAAC,EAAE,CAACF,cAAc,CAACe,OAAO,CAAC,CAAC,CAAC,CAAC;;EAE9B,oBACI;IAAK,SAAS,EAAC,eAAe;IAAC,EAAE,EAAED,WAAY;IAAA,UAAEZ;EAAM;IAAA;IAAA;IAAA;EAAA,QAAO;AAEtE,CAAC;AAAA,GApCKP,MAAM;AAAA,KAANA,MAAM;AAsCZ,eAAeA,MAAM;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}