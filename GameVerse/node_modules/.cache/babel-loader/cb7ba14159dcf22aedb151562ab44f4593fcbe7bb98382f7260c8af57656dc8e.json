{"ast":null,"code":"import { hasCollision, isWithinBoard } from \"./Board\";\nimport { rotate } from \"./Tetrominoes\";\nimport { Action } from \"./Input\";\nconst attemptRotation = _ref => {\n  let {\n    board,\n    player,\n    setPlayer\n  } = _ref;\n  const shape = rotate({\n    piece: player.tetromino.shape,\n    direction: 1\n  });\n  const position = player.position;\n  const isValidRotation = isWithinBoard({\n    board,\n    position,\n    shape\n  }) && !hasCollision({\n    board,\n    position,\n    shape\n  });\n  if (isValidRotation) {\n    setPlayer({\n      ...player,\n      tetromino: {\n        ...player.tetromino,\n        shape\n      }\n    });\n  } else {\n    return false;\n  }\n};\nexport const movePlayer = _ref2 => {\n  let {\n    delta,\n    position,\n    shape,\n    board\n  } = _ref2;\n  const desiredNextPosition = {\n    row: position.row + delta.row,\n    column: position.column + delta.column\n  };\n  const collided = hasCollision({\n    board,\n    position: desiredNextPosition,\n    shape\n  });\n  const isOnBoard = isWithinBoard({\n    board,\n    position: desiredNextPosition,\n    shape\n  });\n  const preventMove = !isOnBoard || isOnBoard && collided;\n  const nextPosition = preventMove ? position : desiredNextPosition;\n  const isMovingDown = delta.row > 0;\n  const isHit = isMovingDown && (collided || !isOnBoard);\n  return {\n    collided: isHit,\n    nextPosition\n  };\n};\nconst attemptMovement = _ref3 => {\n  let {\n    board,\n    action,\n    player,\n    setPlayer,\n    setGameOver,\n    setLoading\n  } = _ref3;\n  const delta = {\n    row: 0,\n    column: 0\n  };\n  let isFastDropping = false;\n  if (action === Action.FastDrop) {\n    isFastDropping = true;\n  } else if (action === Action.SlowDrop) {\n    delta.row += 1;\n  } else if (action === Action.Left) {\n    delta.column -= 1;\n  } else if (action === Action.Right) {\n    delta.column += 1;\n  }\n  const {\n    collided,\n    nextPosition\n  } = movePlayer({\n    delta,\n    position: player.position,\n    shape: player.tetromino.shape,\n    board\n  });\n\n  // Did we collide immediately? If so, game over, man!\n  const isGameOver = collided && player.position.row === 0;\n  if (isGameOver) {\n    setGameOver(isGameOver);\n    setLoading(isGameOver);\n  }\n  setPlayer({\n    ...player,\n    collided,\n    isFastDropping,\n    position: nextPosition\n  });\n};\nexport const playerController = _ref4 => {\n  let {\n    action,\n    board,\n    player,\n    setPlayer,\n    setGameOver,\n    setLoading\n  } = _ref4;\n  if (!action) return;\n  if (action === Action.Rotate) {\n    attemptRotation({\n      board,\n      player,\n      setPlayer\n    });\n  } else {\n    attemptMovement({\n      board,\n      player,\n      setPlayer,\n      action,\n      setGameOver,\n      setLoading\n    });\n  }\n};","map":{"version":3,"names":["hasCollision","isWithinBoard","rotate","Action","attemptRotation","board","player","setPlayer","shape","piece","tetromino","direction","position","isValidRotation","movePlayer","delta","desiredNextPosition","row","column","collided","isOnBoard","preventMove","nextPosition","isMovingDown","isHit","attemptMovement","action","setGameOver","setLoading","isFastDropping","FastDrop","SlowDrop","Left","Right","isGameOver","playerController","Rotate"],"sources":["/Users/praneetha18/Downloads/games-app-main/src/components/Tetris/business/PlayerController.js"],"sourcesContent":["import { hasCollision, isWithinBoard } from \"./Board\";\nimport { rotate } from \"./Tetrominoes\";\nimport { Action } from \"./Input\";\n\nconst attemptRotation = ({ board, player, setPlayer }) => {\n    const shape = rotate({\n        piece: player.tetromino.shape,\n        direction: 1\n    });\n\n    const position = player.position;\n    const isValidRotation =\n        isWithinBoard({ board, position, shape }) &&\n        !hasCollision({ board, position, shape });\n\n    if (isValidRotation) {\n        setPlayer({\n            ...player,\n            tetromino: {\n                ...player.tetromino,\n                shape\n            }\n        });\n    } else {\n        return false;\n    }\n};\n\nexport const movePlayer = ({ delta, position, shape, board }) => {\n    const desiredNextPosition = {\n        row: position.row + delta.row,\n        column: position.column + delta.column\n    };\n\n    const collided = hasCollision({\n        board,\n        position: desiredNextPosition,\n        shape\n    });\n\n    const isOnBoard = isWithinBoard({\n        board,\n        position: desiredNextPosition,\n        shape\n    });\n\n    const preventMove = !isOnBoard || (isOnBoard && collided);\n    const nextPosition = preventMove ? position : desiredNextPosition;\n\n    const isMovingDown = delta.row > 0;\n    const isHit = isMovingDown && (collided || !isOnBoard);\n\n    return { collided: isHit, nextPosition };\n};\n\nconst attemptMovement = ({ board, action, player, setPlayer, setGameOver, setLoading }) => {\n    const delta = { row: 0, column: 0 };\n    let isFastDropping = false;\n\n    if (action === Action.FastDrop) {\n        isFastDropping = true;\n    } else if (action === Action.SlowDrop) {\n        delta.row += 1;\n    } else if (action === Action.Left) {\n        delta.column -= 1;\n    } else if (action === Action.Right) {\n        delta.column += 1;\n    }\n\n    const { collided, nextPosition } = movePlayer({\n        delta,\n        position: player.position,\n        shape: player.tetromino.shape,\n        board\n    });\n\n    // Did we collide immediately? If so, game over, man!\n    const isGameOver = collided && player.position.row === 0;\n    if (isGameOver) {\n        setGameOver(isGameOver);\n        setLoading(isGameOver)\n    }\n\n    setPlayer({\n        ...player,\n        collided,\n        isFastDropping,\n        position: nextPosition\n    });\n};\n\nexport const playerController = ({\n    action,\n    board,\n    player,\n    setPlayer,\n    setGameOver,\n    setLoading\n}) => {\n    if (!action) return;\n\n    if (action === Action.Rotate) {\n        attemptRotation({ board, player, setPlayer });\n    } else {\n        attemptMovement({ board, player, setPlayer, action, setGameOver, setLoading });\n    }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}