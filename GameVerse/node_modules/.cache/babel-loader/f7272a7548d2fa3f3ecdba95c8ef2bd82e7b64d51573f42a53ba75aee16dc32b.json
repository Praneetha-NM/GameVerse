{"ast":null,"code":"var _jsxFileName = \"/Users/praneetha18/Downloads/games-app-main/src/components/Chess/ui/ChessGame.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState, useContext } from 'react';\nimport useSound from 'use-sound';\nimport chessMove from '../assets/moveSoundEffect.mp3';\nimport { useParams, useSearchParams } from 'react-router-dom';\nimport { ColorContext } from '../context/colorContext';\nimport VideoChatApp from '../apis/videochat';\nimport GameLink from './GameLink';\nimport ChessBoard from './ChessBoard';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst socket = require('../apis/scoket').socket;\nconst ChessGameWrapper = props => {\n  _s();\n  const color = useContext(ColorContext);\n  const [searchParams, setSearchParams] = useSearchParams();\n  const gameid = searchParams.get(\"id\");\n  const [play] = useSound(chessMove);\n  const [opponentSocketId, setOpponentSocketId] = useState('');\n  const [opponentDidJoinTheGame, didJoinGame] = useState(false);\n  const [opponentUserName, setUserName] = useState('');\n  const [gameSessionDoesNotExist, doesntExist] = useState(false);\n  useEffect(() => {\n    socket.on(\"playerJoinedRoom\", statusUpdate => {\n      console.log(statusUpdate);\n      console.log(\"A new player has joined the room! Username: \" + statusUpdate.userName + \", Game id: \" + statusUpdate.gameId + \" Socket id: \" + statusUpdate.mySocketId);\n      if (socket.id !== statusUpdate.mySocketId) {\n        setOpponentSocketId(statusUpdate.mySocketId);\n      }\n    });\n    socket.on(\"status\", statusUpdate => {\n      console.log(statusUpdate);\n      alert(statusUpdate);\n      if (statusUpdate === 'This game session does not exist.' || statusUpdate === 'There are already 2 people playing in this room.') {\n        doesntExist(true);\n      }\n    });\n    socket.on('start game', opponentUserName => {\n      console.log(\"START!\");\n      if (opponentUserName !== props.myUserName) {\n        setUserName(opponentUserName);\n        didJoinGame(true);\n      } else {\n        // in chessGame, pass opponentUserName as a prop and label it as the enemy. \n        // in chessGame, use reactContext to get your own userName\n        // socket.emit('myUserName')\n        socket.emit('request username', gameid);\n      }\n    });\n    socket.on('give userName', socketId => {\n      if (socket.id !== socketId) {\n        console.log(\"give userName stage: \" + props.myUserName);\n        socket.emit('recieved userName', {\n          userName: props.myUserName,\n          gameId: gameid\n        });\n      }\n    });\n    socket.on('get Opponent UserName', data => {\n      if (socket.id !== data.socketId) {\n        setUserName(data.userName);\n        console.log('data.socketId:', data.socketId);\n        setOpponentSocketId(data.socketId);\n        didJoinGame(true);\n      }\n    });\n  }, []);\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: opponentDidJoinTheGame ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"main-game\",\n      children: [/*#__PURE__*/_jsxDEV(VideoChatApp, {\n        mySocketId: socket.id,\n        opponentSocketId: opponentSocketId,\n        myUserName: props.myUserName,\n        opponentUserName: opponentUserName,\n        type: 2\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: \"flex\",\n          flexDirection: \"column\"\n        },\n        children: /*#__PURE__*/_jsxDEV(ChessBoard, {\n          playAudio: play,\n          gameId: gameid,\n          color: color.didRedirect\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(VideoChatApp, {\n        mySocketId: socket.id,\n        opponentSocketId: opponentSocketId,\n        myUserName: props.myUserName,\n        opponentUserName: opponentUserName,\n        type: 1\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 17\n    }, this) : gameSessionDoesNotExist ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        style: {\n          textAlign: \"center\",\n          marginTop: \"200px\"\n        },\n        children: \" :( \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(GameLink, {\n      gameid: gameid,\n      data: props\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 17\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 9\n  }, this);\n};\n_s(ChessGameWrapper, \"jyJf9aJA7SM1EntkADDfFEXx7EE=\", false, function () {\n  return [useSearchParams, useSound];\n});\n_c = ChessGameWrapper;\nexport default ChessGameWrapper;\nvar _c;\n$RefreshReg$(_c, \"ChessGameWrapper\");","map":{"version":3,"names":["React","useEffect","useState","useContext","useSound","chessMove","useParams","useSearchParams","ColorContext","VideoChatApp","GameLink","ChessBoard","socket","require","ChessGameWrapper","props","color","searchParams","setSearchParams","gameid","get","play","opponentSocketId","setOpponentSocketId","opponentDidJoinTheGame","didJoinGame","opponentUserName","setUserName","gameSessionDoesNotExist","doesntExist","on","statusUpdate","console","log","userName","gameId","mySocketId","id","alert","myUserName","emit","socketId","data","display","flexDirection","didRedirect","textAlign","marginTop"],"sources":["/Users/praneetha18/Downloads/games-app-main/src/components/Chess/ui/ChessGame.js"],"sourcesContent":["import React, { useEffect, useState, useContext } from 'react'\nimport useSound from 'use-sound'\nimport chessMove from '../assets/moveSoundEffect.mp3'\nimport { useParams, useSearchParams } from 'react-router-dom'\nimport { ColorContext } from '../context/colorContext'\nimport VideoChatApp from '../apis/videochat'\nimport GameLink from './GameLink';\nimport ChessBoard from './ChessBoard';\nconst socket = require('../apis/scoket').socket\n\nconst ChessGameWrapper = (props) => {\n    const color = useContext(ColorContext)\n    const [searchParams, setSearchParams] = useSearchParams();\n    const gameid = searchParams.get(\"id\")\n    const [play] = useSound(chessMove);\n    const [opponentSocketId, setOpponentSocketId] = useState('')\n    const [opponentDidJoinTheGame, didJoinGame] = useState(false)\n    const [opponentUserName, setUserName] = useState('')\n    const [gameSessionDoesNotExist, doesntExist] = useState(false)\n\n    useEffect(() => {\n        socket.on(\"playerJoinedRoom\", statusUpdate => {\n            console.log(statusUpdate)\n            console.log(\"A new player has joined the room! Username: \" + statusUpdate.userName + \", Game id: \" + statusUpdate.gameId + \" Socket id: \" + statusUpdate.mySocketId)\n            if (socket.id !== statusUpdate.mySocketId) {\n                setOpponentSocketId(statusUpdate.mySocketId)\n            }\n        })\n\n        socket.on(\"status\", statusUpdate => {\n            console.log(statusUpdate)\n            alert(statusUpdate)\n            if (statusUpdate === 'This game session does not exist.' || statusUpdate === 'There are already 2 people playing in this room.') {\n                doesntExist(true)\n            }\n        })\n\n\n        socket.on('start game', (opponentUserName) => {\n            console.log(\"START!\")\n            if (opponentUserName !== props.myUserName) {\n                setUserName(opponentUserName)\n                didJoinGame(true)\n            } else {\n                // in chessGame, pass opponentUserName as a prop and label it as the enemy. \n                // in chessGame, use reactContext to get your own userName\n                // socket.emit('myUserName')\n                socket.emit('request username', gameid)\n            }\n        })\n\n\n        socket.on('give userName', (socketId) => {\n            if (socket.id !== socketId) {\n                console.log(\"give userName stage: \" + props.myUserName)\n                socket.emit('recieved userName', { userName: props.myUserName, gameId: gameid })\n            }\n        })\n\n        socket.on('get Opponent UserName', (data) => {\n            if (socket.id !== data.socketId) {\n                setUserName(data.userName)\n                console.log('data.socketId:', data.socketId)\n                setOpponentSocketId(data.socketId)\n                didJoinGame(true)\n            }\n        })\n    }, [])\n\n\n    return (\n        <React.Fragment>\n            {opponentDidJoinTheGame ? (\n                <div className='main-game'>\n                    <VideoChatApp\n                        mySocketId={socket.id}\n                        opponentSocketId={opponentSocketId}\n                        myUserName={props.myUserName}\n                        opponentUserName={opponentUserName}\n                        type={2}\n                    />\n                    <div style={{ display: \"flex\", flexDirection: \"column\" }}>\n                        <ChessBoard playAudio={play}\n                            gameId={gameid}\n                            color={color.didRedirect} />\n                    </div>\n                    <VideoChatApp\n                        mySocketId={socket.id}\n                        opponentSocketId={opponentSocketId}\n                        myUserName={props.myUserName}\n                        opponentUserName={opponentUserName}\n                        type={1}\n                    />\n                </div>\n            ) : gameSessionDoesNotExist ? (\n                <div>\n                    <h1 style={{ textAlign: \"center\", marginTop: \"200px\" }}> :( </h1>\n                </div>\n            ) : (\n                <GameLink gameid={gameid} data={props} />\n            )}\n        </React.Fragment>\n    );\n};\n\nexport default ChessGameWrapper"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}