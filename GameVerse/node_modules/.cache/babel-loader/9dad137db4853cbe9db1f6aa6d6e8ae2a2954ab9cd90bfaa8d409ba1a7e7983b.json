{"ast":null,"code":"var _jsxFileName = \"/Users/praneetha18/Downloads/games-app-main/src/components/Wordle/GameOver.js\",\n  _s = $RefreshSig$();\nimport React, { useContext, useEffect, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport useUserStore from '../../store/user';\nimport Loader from '../Loader/Loader';\nimport { BoardContext } from './Wordle';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GameOver = () => {\n  _s();\n  const {\n    gameOver,\n    correctWord,\n    currentAttempt\n  } = useContext(BoardContext);\n  const [data, setData] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const navigate = useNavigate();\n  const token = useUserStore(state => state.token);\n  const getUser = useUserStore(state => state.getUser);\n  useEffect(() => {\n    const updateScore = async () => {\n      const res = await fetch(`${process.env.REACT_APP_BASE_URL}/update-score`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: `Bearer :${token}`\n        },\n        body: JSON.stringify(data)\n      });\n      getUser(token);\n      setLoading(false);\n      if (res.status === 200) {\n        navigate(\"/wordle\");\n      } else {\n        alert(\"Could Not Save Scores \");\n      }\n    };\n    if (data !== null) updateScore();\n  }, [data]);\n  if (loading) return /*#__PURE__*/_jsxDEV(Loader, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 16\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"gameOver\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: gameOver.guessedWord ? \"Guessed Correctly\" : \" You Failed To Guess The Word Correctly\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [\"Correct Word: \", correctWord.toUpperCase()]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 13\n    }, this), gameOver.guessedWord && /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [\"You guessed in \", currentAttempt.attempt, \" attempts\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"continue\",\n      onClick: () => {\n        setData({\n          game: 'WDLE',\n          score: currentAttempt.attempt\n        });\n        setLoading(true);\n      },\n      children: \" Click here To Continue\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 9\n  }, this);\n};\n_s(GameOver, \"da5VYvQxkZZKwyU0G4v650p9Dgw=\", false, function () {\n  return [useNavigate, useUserStore, useUserStore];\n});\n_c = GameOver;\nexport default GameOver;\nvar _c;\n$RefreshReg$(_c, \"GameOver\");","map":{"version":3,"names":["React","useContext","useEffect","useState","useNavigate","useUserStore","Loader","BoardContext","GameOver","gameOver","correctWord","currentAttempt","data","setData","loading","setLoading","navigate","token","state","getUser","updateScore","res","fetch","process","env","REACT_APP_BASE_URL","method","headers","Authorization","body","JSON","stringify","status","alert","guessedWord","toUpperCase","attempt","game","score"],"sources":["/Users/praneetha18/Downloads/games-app-main/src/components/Wordle/GameOver.js"],"sourcesContent":["import React, { useContext, useEffect, useState } from 'react'\nimport { useNavigate } from 'react-router-dom'\nimport useUserStore from '../../store/user'\nimport Loader from '../Loader/Loader'\nimport { BoardContext } from './Wordle'\n\nconst GameOver = () => {\n    const { gameOver, correctWord, currentAttempt } = useContext(BoardContext)\n    const [data, setData] = useState(null)\n    const [loading, setLoading] = useState(false)\n    const navigate = useNavigate()\n    const token = useUserStore(state => state.token)\n    const getUser = useUserStore(state => state.getUser)\n\n    useEffect(() => {\n        const updateScore = async () => {\n            const res = await fetch(`${process.env.REACT_APP_BASE_URL}/update-score`, {\n                method: \"POST\",\n                headers: {\n                    \"Content-Type\": \"application/json\",\n                    Authorization: `Bearer :${token}`,\n                },\n                body: JSON.stringify(data),\n            });\n\n            getUser(token)\n\n            setLoading(false);\n            if (res.status === 200) {\n                navigate(\"/wordle\");\n            } else {\n                alert(\"Could Not Save Scores \");\n            }\n        }\n\n        if (data !== null)\n            updateScore()\n\n    }, [data])\n\n    if (loading)\n        return <Loader />\n\n    return (\n        <div className='gameOver'>\n            <h1>{gameOver.guessedWord ? \"Guessed Correctly\" : \" You Failed To Guess The Word Correctly\"}</h1>\n            <h2>Correct Word: {correctWord.toUpperCase()}</h2>\n            {gameOver.guessedWord && (\n                <h2>You guessed in {currentAttempt.attempt} attempts</h2>\n            )}\n            <h2 className='continue' onClick={() => {\n                setData({ game: 'WDLE', score: currentAttempt.attempt })\n                setLoading(true)\n            }}> Click here To Continue</h2>\n        </div>\n    )\n}\n\nexport default GameOver"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,UAAU,EAAEC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC9D,SAASC,WAAW,QAAQ,kBAAkB;AAC9C,OAAOC,YAAY,MAAM,kBAAkB;AAC3C,OAAOC,MAAM,MAAM,kBAAkB;AACrC,SAASC,YAAY,QAAQ,UAAU;AAAA;AAEvC,MAAMC,QAAQ,GAAG,MAAM;EAAA;EACnB,MAAM;IAAEC,QAAQ;IAAEC,WAAW;IAAEC;EAAe,CAAC,GAAGV,UAAU,CAACM,YAAY,CAAC;EAC1E,MAAM,CAACK,IAAI,EAAEC,OAAO,CAAC,GAAGV,QAAQ,CAAC,IAAI,CAAC;EACtC,MAAM,CAACW,OAAO,EAAEC,UAAU,CAAC,GAAGZ,QAAQ,CAAC,KAAK,CAAC;EAC7C,MAAMa,QAAQ,GAAGZ,WAAW,EAAE;EAC9B,MAAMa,KAAK,GAAGZ,YAAY,CAACa,KAAK,IAAIA,KAAK,CAACD,KAAK,CAAC;EAChD,MAAME,OAAO,GAAGd,YAAY,CAACa,KAAK,IAAIA,KAAK,CAACC,OAAO,CAAC;EAEpDjB,SAAS,CAAC,MAAM;IACZ,MAAMkB,WAAW,GAAG,YAAY;MAC5B,MAAMC,GAAG,GAAG,MAAMC,KAAK,CAAE,GAAEC,OAAO,CAACC,GAAG,CAACC,kBAAmB,eAAc,EAAE;QACtEC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACL,cAAc,EAAE,kBAAkB;UAClCC,aAAa,EAAG,WAAUX,KAAM;QACpC,CAAC;QACDY,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACnB,IAAI;MAC7B,CAAC,CAAC;MAEFO,OAAO,CAACF,KAAK,CAAC;MAEdF,UAAU,CAAC,KAAK,CAAC;MACjB,IAAIM,GAAG,CAACW,MAAM,KAAK,GAAG,EAAE;QACpBhB,QAAQ,CAAC,SAAS,CAAC;MACvB,CAAC,MAAM;QACHiB,KAAK,CAAC,wBAAwB,CAAC;MACnC;IACJ,CAAC;IAED,IAAIrB,IAAI,KAAK,IAAI,EACbQ,WAAW,EAAE;EAErB,CAAC,EAAE,CAACR,IAAI,CAAC,CAAC;EAEV,IAAIE,OAAO,EACP,oBAAO,QAAC,MAAM;IAAA;IAAA;IAAA;EAAA,QAAG;EAErB,oBACI;IAAK,SAAS,EAAC,UAAU;IAAA,wBACrB;MAAA,UAAKL,QAAQ,CAACyB,WAAW,GAAG,mBAAmB,GAAG;IAAyC;MAAA;MAAA;MAAA;IAAA,QAAM,eACjG;MAAA,WAAI,gBAAc,EAACxB,WAAW,CAACyB,WAAW,EAAE;IAAA;MAAA;MAAA;MAAA;IAAA,QAAM,EACjD1B,QAAQ,CAACyB,WAAW,iBACjB;MAAA,WAAI,iBAAe,EAACvB,cAAc,CAACyB,OAAO,EAAC,WAAS;IAAA;MAAA;MAAA;MAAA;IAAA,QACvD,eACD;MAAI,SAAS,EAAC,UAAU;MAAC,OAAO,EAAE,MAAM;QACpCvB,OAAO,CAAC;UAAEwB,IAAI,EAAE,MAAM;UAAEC,KAAK,EAAE3B,cAAc,CAACyB;QAAQ,CAAC,CAAC;QACxDrB,UAAU,CAAC,IAAI,CAAC;MACpB,CAAE;MAAA,UAAC;IAAuB;MAAA;MAAA;MAAA;IAAA,QAAK;EAAA;IAAA;IAAA;IAAA;EAAA,QAC7B;AAEd,CAAC;AAAA,GAlDKP,QAAQ;EAAA,QAIOJ,WAAW,EACdC,YAAY,EACVA,YAAY;AAAA;AAAA,KAN1BG,QAAQ;AAoDd,eAAeA,QAAQ;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}