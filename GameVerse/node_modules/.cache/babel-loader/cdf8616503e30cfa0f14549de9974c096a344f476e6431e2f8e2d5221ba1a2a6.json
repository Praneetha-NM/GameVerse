{"ast":null,"code":"import { Chess } from 'chess.js';\nimport ChessPiece from './ChessPiece';\nimport Square from './Square';\nclass Game {\n  constructor(thisPlayersColorIsWhite) {\n    this.thisPlayersColorIsWhite = thisPlayersColorIsWhite;\n    this.isWhitesTurn = true; // Start with White's turn\n    this.chessBoard = this.makeStartingBoard();\n    this.chess = new Chess();\n    this.toCoord = this.generateCoordMap(thisPlayersColorIsWhite);\n    this.toAlphabet = this.generateAlphabetMap(thisPlayersColorIsWhite);\n    this.nQueens = 1;\n  }\n  generateCoordMap(isWhite) {\n    return isWhite ? {\n      0: 8,\n      1: 7,\n      2: 6,\n      3: 5,\n      4: 4,\n      5: 3,\n      6: 2,\n      7: 1\n    } : {\n      0: 1,\n      1: 2,\n      2: 3,\n      3: 4,\n      4: 5,\n      5: 6,\n      6: 7,\n      7: 8\n    };\n  }\n  generateAlphabetMap(isWhite) {\n    return isWhite ? {\n      0: \"a\",\n      1: \"b\",\n      2: \"c\",\n      3: \"d\",\n      4: \"e\",\n      5: \"f\",\n      6: \"g\",\n      7: \"h\"\n    } : {\n      0: \"h\",\n      1: \"g\",\n      2: \"f\",\n      3: \"e\",\n      4: \"d\",\n      5: \"c\",\n      6: \"b\",\n      7: \"a\"\n    };\n  }\n  getBoard() {\n    return this.chessBoard;\n  }\n  setBoard(newBoard) {\n    this.chessBoard = newBoard;\n  }\n  movePiece(pieceId, to, isMyMove) {\n    const to2D = this.getTo2DMapping(isMyMove);\n    const currentBoard = this.getBoard();\n    const pieceCoordinates = this.findPiece(currentBoard, pieceId);\n    if (!pieceCoordinates) return;\n    const [x, y] = pieceCoordinates;\n    const to_y = to2D[to[1]];\n    const to_x = to2D[to[0]];\n    const originalPiece = currentBoard[y][x].getPiece();\n    if (y === to_y && x === to_x) return \"moved in the same position.\";\n    const moveAttempt = this.chess.move({\n      from: this.toChessMove([x, y], to2D),\n      to: this.toChessMove(to, to2D),\n      piece: pieceId[1]\n    });\n    if (moveAttempt === null) return \"invalid move\";\n    currentBoard[to_y][to_x].setPiece(originalPiece);\n    currentBoard[y][x].setPiece(null);\n    this.setBoard(currentBoard);\n\n    // Switch turns\n    this.isWhitesTurn = !this.isWhitesTurn;\n\n    // Notify UI to update\n    this.updateUI();\n  }\n  getTo2DMapping(isMyMove) {\n    return isMyMove ? {\n      105: 0,\n      195: 1,\n      285: 2,\n      375: 3,\n      465: 4,\n      555: 5,\n      645: 6,\n      735: 7\n    } : {\n      105: 7,\n      195: 6,\n      285: 5,\n      375: 4,\n      465: 3,\n      555: 2,\n      645: 1,\n      735: 0\n    };\n  }\n  updateUI() {\n    // Implement UI update logic here\n    console.log(\"UI updated with new board state.\");\n  }\n  findPiece(board, pieceId) {\n    for (let i = 0; i < 8; i++) {\n      for (let j = 0; j < 8; j++) {\n        if (board[i][j].getPieceIdOnThisSquare() === pieceId) {\n          return [j, i];\n        }\n      }\n    }\n    return null;\n  }\n  makeStartingBoard() {\n    const backRank = [\"rook\", \"knight\", \"bishop\", \"queen\", \"king\", \"bishop\", \"knight\", \"rook\"];\n    const startingChessBoard = [];\n    for (let i = 0; i < 8; i++) {\n      startingChessBoard.push([]);\n      for (let j = 0; j < 8; j++) {\n        const emptySquare = new Square(j, i, null);\n        startingChessBoard[i].push(emptySquare);\n      }\n    }\n    const whiteBackRankId = [\"wr1\", \"wn1\", \"wb1\", \"wq1\", \"wk1\", \"wb2\", \"wn2\", \"wr2\"];\n    const blackBackRankId = [\"br1\", \"bn1\", \"bb1\", \"bq1\", \"bk1\", \"bb2\", \"bn2\", \"br2\"];\n    for (let j = 0; j < 8; j += 7) {\n      for (let i = 0; i < 8; i++) {\n        if (j === 0) {\n          startingChessBoard[j][this.thisPlayersColorIsWhite ? i : 7 - i].setPiece(new ChessPiece(backRank[i], false, this.thisPlayersColorIsWhite ? \"black\" : \"white\", this.thisPlayersColorIsWhite ? blackBackRankId[i] : whiteBackRankId[i]));\n          startingChessBoard[j + 1][this.thisPlayersColorIsWhite ? i : 7 - i].setPiece(new ChessPiece(\"pawn\", false, this.thisPlayersColorIsWhite ? \"black\" : \"white\", this.thisPlayersColorIsWhite ? \"bp\" + i : \"wp\" + i));\n        } else {\n          startingChessBoard[j - 1][this.thisPlayersColorIsWhite ? i : 7 - i].setPiece(new ChessPiece(\"pawn\", false, this.thisPlayersColorIsWhite ? \"white\" : \"black\", this.thisPlayersColorIsWhite ? \"wp\" + i : \"bp\" + i));\n          startingChessBoard[j][this.thisPlayersColorIsWhite ? i : 7 - i].setPiece(new ChessPiece(backRank[i], false, this.thisPlayersColorIsWhite ? \"white\" : \"black\", this.thisPlayersColorIsWhite ? whiteBackRankId[i] : blackBackRankId[i]));\n        }\n      }\n    }\n    return startingChessBoard;\n  }\n}\nexport default Game;","map":{"version":3,"names":["Chess","ChessPiece","Square","Game","constructor","thisPlayersColorIsWhite","isWhitesTurn","chessBoard","makeStartingBoard","chess","toCoord","generateCoordMap","toAlphabet","generateAlphabetMap","nQueens","isWhite","getBoard","setBoard","newBoard","movePiece","pieceId","to","isMyMove","to2D","getTo2DMapping","currentBoard","pieceCoordinates","findPiece","x","y","to_y","to_x","originalPiece","getPiece","moveAttempt","move","from","toChessMove","piece","setPiece","updateUI","console","log","board","i","j","getPieceIdOnThisSquare","backRank","startingChessBoard","push","emptySquare","whiteBackRankId","blackBackRankId"],"sources":["/Users/praneetha18/Downloads/games-app-main/src/components/Chess/model/Chess.js"],"sourcesContent":["import { Chess } from 'chess.js';\nimport ChessPiece from './ChessPiece';\nimport Square from './Square';\n\nclass Game {\n    constructor(thisPlayersColorIsWhite) {\n        this.thisPlayersColorIsWhite = thisPlayersColorIsWhite;\n        this.isWhitesTurn = true; // Start with White's turn\n        this.chessBoard = this.makeStartingBoard();\n        this.chess = new Chess();\n        this.toCoord = this.generateCoordMap(thisPlayersColorIsWhite);\n        this.toAlphabet = this.generateAlphabetMap(thisPlayersColorIsWhite);\n        this.nQueens = 1;\n    }\n\n    generateCoordMap(isWhite) {\n        return isWhite ? { 0: 8, 1: 7, 2: 6, 3: 5, 4: 4, 5: 3, 6: 2, 7: 1 } : \n                         { 0: 1, 1: 2, 2: 3, 3: 4, 4: 5, 5: 6, 6: 7, 7: 8 };\n    }\n\n    generateAlphabetMap(isWhite) {\n        return isWhite ? { 0: \"a\", 1: \"b\", 2: \"c\", 3: \"d\", 4: \"e\", 5: \"f\", 6: \"g\", 7: \"h\" } : \n                         { 0: \"h\", 1: \"g\", 2: \"f\", 3: \"e\", 4: \"d\", 5: \"c\", 6: \"b\", 7: \"a\" };\n    }\n\n    getBoard() {\n        return this.chessBoard;\n    }\n\n    setBoard(newBoard) {\n        this.chessBoard = newBoard;\n    }\n\n    movePiece(pieceId, to, isMyMove) {\n        const to2D = this.getTo2DMapping(isMyMove);\n        const currentBoard = this.getBoard();\n        const pieceCoordinates = this.findPiece(currentBoard, pieceId);\n\n        if (!pieceCoordinates) return;\n\n        const [x, y] = pieceCoordinates;\n        const to_y = to2D[to[1]];\n        const to_x = to2D[to[0]];\n        const originalPiece = currentBoard[y][x].getPiece();\n\n        if (y === to_y && x === to_x) return \"moved in the same position.\";\n\n        const moveAttempt = this.chess.move({\n            from: this.toChessMove([x, y], to2D),\n            to: this.toChessMove(to, to2D),\n            piece: pieceId[1],\n        });\n\n        if (moveAttempt === null) return \"invalid move\";\n\n        currentBoard[to_y][to_x].setPiece(originalPiece);\n        currentBoard[y][x].setPiece(null);\n        this.setBoard(currentBoard);\n\n        // Switch turns\n        this.isWhitesTurn = !this.isWhitesTurn;\n\n        // Notify UI to update\n        this.updateUI();\n    }\n\n    getTo2DMapping(isMyMove) {\n        return isMyMove ? { 105: 0, 195: 1, 285: 2, 375: 3, 465: 4, 555: 5, 645: 6, 735: 7 } :\n                          { 105: 7, 195: 6, 285: 5, 375: 4, 465: 3, 555: 2, 645: 1, 735: 0 };\n    }\n\n    updateUI() {\n        // Implement UI update logic here\n        console.log(\"UI updated with new board state.\");\n    }\n\n    findPiece(board, pieceId) {\n        for (let i = 0; i < 8; i++) {\n            for (let j = 0; j < 8; j++) {\n                if (board[i][j].getPieceIdOnThisSquare() === pieceId) {\n                    return [j, i];\n                }\n            }\n        }\n        return null;\n    }\n\n    makeStartingBoard() {\n        const backRank = [\"rook\", \"knight\", \"bishop\", \"queen\", \"king\", \"bishop\", \"knight\", \"rook\"];\n        const startingChessBoard = [];\n        for (let i = 0; i < 8; i++) {\n            startingChessBoard.push([]);\n            for (let j = 0; j < 8; j++) {\n                const emptySquare = new Square(j, i, null);\n                startingChessBoard[i].push(emptySquare);\n            }\n        }\n\n        const whiteBackRankId = [\"wr1\", \"wn1\", \"wb1\", \"wq1\", \"wk1\", \"wb2\", \"wn2\", \"wr2\"];\n        const blackBackRankId = [\"br1\", \"bn1\", \"bb1\", \"bq1\", \"bk1\", \"bb2\", \"bn2\", \"br2\"];\n        for (let j = 0; j < 8; j += 7) {\n            for (let i = 0; i < 8; i++) {\n                if (j === 0) {\n                    startingChessBoard[j][this.thisPlayersColorIsWhite ? i : 7 - i].setPiece(\n                        new ChessPiece(backRank[i], false, this.thisPlayersColorIsWhite ? \"black\" : \"white\", this.thisPlayersColorIsWhite ? blackBackRankId[i] : whiteBackRankId[i])\n                    );\n                    startingChessBoard[j + 1][this.thisPlayersColorIsWhite ? i : 7 - i].setPiece(\n                        new ChessPiece(\"pawn\", false, this.thisPlayersColorIsWhite ? \"black\" : \"white\", this.thisPlayersColorIsWhite ? \"bp\" + i : \"wp\" + i)\n                    );\n                } else {\n                    startingChessBoard[j - 1][this.thisPlayersColorIsWhite ? i : 7 - i].setPiece(\n                        new ChessPiece(\"pawn\", false, this.thisPlayersColorIsWhite ? \"white\" : \"black\", this.thisPlayersColorIsWhite ? \"wp\" + i : \"bp\" + i)\n                    );\n                    startingChessBoard[j][this.thisPlayersColorIsWhite ? i : 7 - i].setPiece(\n                        new ChessPiece(backRank[i], false, this.thisPlayersColorIsWhite ? \"white\" : \"black\", this.thisPlayersColorIsWhite ? whiteBackRankId[i] : blackBackRankId[i])\n                    );\n                }\n            }\n        }\n        return startingChessBoard;\n    }\n}\n\nexport default Game;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}