{"ast":null,"code":"export default function BrickCollision(circle, rect) {\n  var distX = Math.abs(circle.x - rect.x - rect.width / 2);\n  var distY = Math.abs(circle.y - rect.y - rect.height / 2);\n  if (distX > rect.width / 2 + circle.rad) {\n    // return false;\n    return {\n      hit: false\n    };\n  }\n  if (distY > rect.height / 2 + circle.rad) {\n    // return false;\n    return {\n      hit: false\n    };\n  }\n  if (distX <= rect.width / 2) {\n    // return true;\n    return {\n      hit: true,\n      axis: \"Y\"\n    };\n  }\n  if (distY <= rect.height / 2) {\n    // return true;\n    return {\n      hit: true,\n      axis: \"X\"\n    };\n  }\n\n  // also test for corner collisions\n  var dx = distX - rect.width / 2;\n  var dy = distY - rect.height / 2;\n  // return dx * dx + dy * dy <= circle.rad * circle.rad;\n  return {\n    hit: dx * dx + dy * dy <= circle.rad * circle.rad,\n    axis: \"X\"\n  };\n}\n_c = BrickCollision;\nvar _c;\n$RefreshReg$(_c, \"BrickCollision\");","map":{"version":3,"names":["BrickCollision","circle","rect","distX","Math","abs","x","width","distY","y","height","rad","hit","axis","dx","dy"],"sources":["/Users/praneetha18/Downloads/games-app-main/src/components/BreakOut/utils/BrickCollision.js"],"sourcesContent":["export default function BrickCollision(circle, rect) {\n    var distX = Math.abs(circle.x - rect.x - rect.width / 2);\n    var distY = Math.abs(circle.y - rect.y - rect.height / 2);\n\n    if (distX > rect.width / 2 + circle.rad) {\n        // return false;\n        return {\n            hit: false,\n        };\n    }\n    if (distY > rect.height / 2 + circle.rad) {\n        // return false;\n        return {\n            hit: false,\n        };\n    }\n\n    if (distX <= rect.width / 2) {\n        // return true;\n        return {\n            hit: true,\n            axis: \"Y\",\n        };\n    }\n    if (distY <= rect.height / 2) {\n        // return true;\n        return {\n            hit: true,\n            axis: \"X\",\n        };\n    }\n\n    // also test for corner collisions\n    var dx = distX - rect.width / 2;\n    var dy = distY - rect.height / 2;\n    // return dx * dx + dy * dy <= circle.rad * circle.rad;\n    return {\n        hit: dx * dx + dy * dy <= circle.rad * circle.rad,\n        axis: \"X\",\n    };\n}"],"mappings":"AAAA,eAAe,SAASA,cAAc,CAACC,MAAM,EAAEC,IAAI,EAAE;EACjD,IAAIC,KAAK,GAAGC,IAAI,CAACC,GAAG,CAACJ,MAAM,CAACK,CAAC,GAAGJ,IAAI,CAACI,CAAC,GAAGJ,IAAI,CAACK,KAAK,GAAG,CAAC,CAAC;EACxD,IAAIC,KAAK,GAAGJ,IAAI,CAACC,GAAG,CAACJ,MAAM,CAACQ,CAAC,GAAGP,IAAI,CAACO,CAAC,GAAGP,IAAI,CAACQ,MAAM,GAAG,CAAC,CAAC;EAEzD,IAAIP,KAAK,GAAGD,IAAI,CAACK,KAAK,GAAG,CAAC,GAAGN,MAAM,CAACU,GAAG,EAAE;IACrC;IACA,OAAO;MACHC,GAAG,EAAE;IACT,CAAC;EACL;EACA,IAAIJ,KAAK,GAAGN,IAAI,CAACQ,MAAM,GAAG,CAAC,GAAGT,MAAM,CAACU,GAAG,EAAE;IACtC;IACA,OAAO;MACHC,GAAG,EAAE;IACT,CAAC;EACL;EAEA,IAAIT,KAAK,IAAID,IAAI,CAACK,KAAK,GAAG,CAAC,EAAE;IACzB;IACA,OAAO;MACHK,GAAG,EAAE,IAAI;MACTC,IAAI,EAAE;IACV,CAAC;EACL;EACA,IAAIL,KAAK,IAAIN,IAAI,CAACQ,MAAM,GAAG,CAAC,EAAE;IAC1B;IACA,OAAO;MACHE,GAAG,EAAE,IAAI;MACTC,IAAI,EAAE;IACV,CAAC;EACL;;EAEA;EACA,IAAIC,EAAE,GAAGX,KAAK,GAAGD,IAAI,CAACK,KAAK,GAAG,CAAC;EAC/B,IAAIQ,EAAE,GAAGP,KAAK,GAAGN,IAAI,CAACQ,MAAM,GAAG,CAAC;EAChC;EACA,OAAO;IACHE,GAAG,EAAEE,EAAE,GAAGA,EAAE,GAAGC,EAAE,GAAGA,EAAE,IAAId,MAAM,CAACU,GAAG,GAAGV,MAAM,CAACU,GAAG;IACjDE,IAAI,EAAE;EACV,CAAC;AACL;AAAC,KAxCuBb,cAAc;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}