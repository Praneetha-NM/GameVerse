{"ast":null,"code":"var _jsxFileName = \"/Users/praneetha18/Downloads/games-app-main/src/components/Wordle/Wordle.js\",\n  _s = $RefreshSig$();\nimport React, { useState, createContext, useEffect } from 'react';\nimport { boardDefault } from '../../utils/Wordle';\nimport Board from './Board';\nimport KeyBoard from './KeyBoard';\nimport './Wordle.css';\nimport GameOver from './GameOver';\nimport wordbank from '../../utils/WordBank.txt';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const BoardContext = /*#__PURE__*/createContext();\nconst Wordle = () => {\n  _s();\n  const [board, setBoard] = useState(boardDefault);\n  const [currentAttempt, setCurrentAttempt] = useState({\n    attempt: 0,\n    letterPos: 0\n  });\n  const [wordSet, setWordSet] = useState(new Set());\n  const [disabledLetters, setDisabledLetters] = useState([]);\n  const [gameOver, setGameOver] = useState({\n    gameOver: false,\n    guessedWord: false\n  });\n  const [correctWord, setCorrectWord] = useState(\"\");\n  const generateWordSet = async () => {\n    await fetch(wordbank).then(response => response.text()).then(result => {\n      const wordArr = result.split(/\\r?\\n/).map(word => word.trim());\n      setCorrectWord(wordArr[Math.floor(Math.random() * wordArr.length)]);\n      setWordSet(new Set(wordArr));\n      console.log(wordSet);\n    });\n  };\n  useEffect(() => {\n    generateWordSet();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"wordle\",\n    children: [/*#__PURE__*/_jsxDEV(\"nav\", {\n      className: \"wordle-nav\",\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Wordle\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(BoardContext.Provider, {\n      value: {\n        board,\n        setBoard,\n        currentAttempt,\n        setCurrentAttempt,\n        correctWord,\n        wordSet,\n        setDisabledLetters,\n        disabledLetters,\n        gameOver,\n        setGameOver\n      },\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"wordle-game\",\n        children: [/*#__PURE__*/_jsxDEV(Board, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 21\n        }, this), gameOver.gameOver ? /*#__PURE__*/_jsxDEV(GameOver, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 42\n        }, this) : /*#__PURE__*/_jsxDEV(KeyBoard, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 57\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 9\n  }, this);\n};\n_s(Wordle, \"ok63gAUzTbLCXTsb+Wk+hmi2pYM=\");\n_c = Wordle;\nexport default Wordle;\nvar _c;\n$RefreshReg$(_c, \"Wordle\");","map":{"version":3,"names":["React","useState","createContext","useEffect","boardDefault","Board","KeyBoard","GameOver","wordbank","BoardContext","Wordle","board","setBoard","currentAttempt","setCurrentAttempt","attempt","letterPos","wordSet","setWordSet","Set","disabledLetters","setDisabledLetters","gameOver","setGameOver","guessedWord","correctWord","setCorrectWord","generateWordSet","fetch","then","response","text","result","wordArr","split","map","word","trim","Math","floor","random","length","console","log"],"sources":["/Users/praneetha18/Downloads/games-app-main/src/components/Wordle/Wordle.js"],"sourcesContent":["import React, { useState, createContext, useEffect } from 'react'\nimport { boardDefault } from '../../utils/Wordle'\nimport Board from './Board'\nimport KeyBoard from './KeyBoard'\nimport './Wordle.css'\nimport GameOver from './GameOver'\nimport wordbank from '../../utils/WordBank.txt'\n\nexport const BoardContext = createContext()\n\nconst Wordle = () => {\n    const [board, setBoard] = useState(boardDefault)\n    const [currentAttempt, setCurrentAttempt] = useState({ attempt: 0, letterPos: 0 })\n    const [wordSet, setWordSet] = useState(new Set())\n    const [disabledLetters, setDisabledLetters] = useState([])\n    const [gameOver, setGameOver] = useState({\n        gameOver: false,\n        guessedWord: false\n    })\n    const [correctWord, setCorrectWord] = useState(\"\");\n\n    const generateWordSet = async () => {\n        await fetch(wordbank)\n            .then((response) => response.text())\n            .then((result) => {\n                const wordArr = result.split(/\\r?\\n/).map(word => word.trim());\n                \n                setCorrectWord(wordArr[Math.floor(Math.random() * wordArr.length)]);\n                setWordSet(new Set(wordArr));\n                console.log(wordSet);\n            });\n    };\n\n    useEffect(() => {\n        generateWordSet();\n    }, [])\n\n    return (\n        <div className='wordle'>\n            <nav className='wordle-nav'>\n                <h1>Wordle</h1>\n            </nav>\n            <BoardContext.Provider value={{ board, setBoard, currentAttempt, setCurrentAttempt, correctWord, wordSet, setDisabledLetters, disabledLetters, gameOver, setGameOver }}>\n                <div className='wordle-game'>\n                    <Board />\n                    {gameOver.gameOver ? <GameOver /> : <KeyBoard />}\n                </div>\n            </BoardContext.Provider>\n        </div>\n    )\n}\n\nexport default Wordle"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,aAAa,EAAEC,SAAS,QAAQ,OAAO;AACjE,SAASC,YAAY,QAAQ,oBAAoB;AACjD,OAAOC,KAAK,MAAM,SAAS;AAC3B,OAAOC,QAAQ,MAAM,YAAY;AACjC,OAAO,cAAc;AACrB,OAAOC,QAAQ,MAAM,YAAY;AACjC,OAAOC,QAAQ,MAAM,0BAA0B;AAAA;AAE/C,OAAO,MAAMC,YAAY,gBAAGP,aAAa,EAAE;AAE3C,MAAMQ,MAAM,GAAG,MAAM;EAAA;EACjB,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGX,QAAQ,CAACG,YAAY,CAAC;EAChD,MAAM,CAACS,cAAc,EAAEC,iBAAiB,CAAC,GAAGb,QAAQ,CAAC;IAAEc,OAAO,EAAE,CAAC;IAAEC,SAAS,EAAE;EAAE,CAAC,CAAC;EAClF,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGjB,QAAQ,CAAC,IAAIkB,GAAG,EAAE,CAAC;EACjD,MAAM,CAACC,eAAe,EAAEC,kBAAkB,CAAC,GAAGpB,QAAQ,CAAC,EAAE,CAAC;EAC1D,MAAM,CAACqB,QAAQ,EAAEC,WAAW,CAAC,GAAGtB,QAAQ,CAAC;IACrCqB,QAAQ,EAAE,KAAK;IACfE,WAAW,EAAE;EACjB,CAAC,CAAC;EACF,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGzB,QAAQ,CAAC,EAAE,CAAC;EAElD,MAAM0B,eAAe,GAAG,YAAY;IAChC,MAAMC,KAAK,CAACpB,QAAQ,CAAC,CAChBqB,IAAI,CAAEC,QAAQ,IAAKA,QAAQ,CAACC,IAAI,EAAE,CAAC,CACnCF,IAAI,CAAEG,MAAM,IAAK;MACd,MAAMC,OAAO,GAAGD,MAAM,CAACE,KAAK,CAAC,OAAO,CAAC,CAACC,GAAG,CAACC,IAAI,IAAIA,IAAI,CAACC,IAAI,EAAE,CAAC;MAE9DX,cAAc,CAACO,OAAO,CAACK,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,EAAE,GAAGP,OAAO,CAACQ,MAAM,CAAC,CAAC,CAAC;MACnEvB,UAAU,CAAC,IAAIC,GAAG,CAACc,OAAO,CAAC,CAAC;MAC5BS,OAAO,CAACC,GAAG,CAAC1B,OAAO,CAAC;IACxB,CAAC,CAAC;EACV,CAAC;EAEDd,SAAS,CAAC,MAAM;IACZwB,eAAe,EAAE;EACrB,CAAC,EAAE,EAAE,CAAC;EAEN,oBACI;IAAK,SAAS,EAAC,QAAQ;IAAA,wBACnB;MAAK,SAAS,EAAC,YAAY;MAAA,uBACvB;QAAA,UAAI;MAAM;QAAA;QAAA;QAAA;MAAA;IAAK;MAAA;MAAA;MAAA;IAAA,QACb,eACN,QAAC,YAAY,CAAC,QAAQ;MAAC,KAAK,EAAE;QAAEhB,KAAK;QAAEC,QAAQ;QAAEC,cAAc;QAAEC,iBAAiB;QAAEW,WAAW;QAAER,OAAO;QAAEI,kBAAkB;QAAED,eAAe;QAAEE,QAAQ;QAAEC;MAAY,CAAE;MAAA,uBACnK;QAAK,SAAS,EAAC,aAAa;QAAA,wBACxB,QAAC,KAAK;UAAA;UAAA;UAAA;QAAA,QAAG,EACRD,QAAQ,CAACA,QAAQ,gBAAG,QAAC,QAAQ;UAAA;UAAA;UAAA;QAAA,QAAG,gBAAG,QAAC,QAAQ;UAAA;UAAA;UAAA;QAAA,QAAG;MAAA;QAAA;QAAA;QAAA;MAAA;IAC9C;MAAA;MAAA;MAAA;IAAA,QACc;EAAA;IAAA;IAAA;IAAA;EAAA,QACtB;AAEd,CAAC;AAAA,GAxCKZ,MAAM;AAAA,KAANA,MAAM;AA0CZ,eAAeA,MAAM;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}